-- ConfigManager.lua
-- credits: dawid
local HttpService = game:GetService("HttpService")

local ConfigManager = {
    Window = nil,
    Folder = nil,
    Path = nil,
    Configs = {},
    ElementsByConfig = {}, -- Store elements by Config value
    Parser = {
        Colorpicker = {
            Save = function(obj)
                return {
                    __type = obj.__type,
                    value = obj.Default:ToHex(),
                    transparency = obj.Transparency,
                }
            end,
            Load = function(element, data)
                if element then
                    element:Update(Color3.fromHex(data.value), data.transparency)
                end
            end
        },
        Dropdown = {
            Save = function(obj) return { __type = obj.__type, value = obj.Value } end,
            Load = function(element, data) if element then element:Select(data.value) end end
        },
        Input = {
            Save = function(obj) return { __type = obj.__type, value = obj.Value } end,
            Load = function(element, data) if element then element:Set(data.value) end end
        },
        Keybind = {
            Save = function(obj) return { __type = obj.__type, value = obj.Value } end,
            Load = function(element, data) if element then element:Set(data.value) end end
        },
        Slider = {
            Save = function(obj) return { __type = obj.__type, value = obj.Value.Default } end,
            Load = function(element, data) if element then element:Set(data.value) end end
        },
        Toggle = {
            Save = function(obj) return { __type = obj.__type, value = obj.Value } end,
            Load = function(element, data) if element then element:Set(data.value) end end
        },
    }
}

function ConfigManager:Init(Window)
    if Window.Folder then
        self.Window = Window
        self.Folder = Window.Folder
        self.Path = "H4xScripts/" .. self.Folder .. "/config/"
        return self
    end
    return false
end

function ConfigManager:CreateConfig(configFilename)
    local ConfigModule = {
        Path = self.Path .. configFilename .. ".json",
        Elements = {}
    }

    function ConfigModule:Register(Name, ElementOrConfig)
        local Element, Config
        if type(ElementOrConfig) == "table" and ElementOrConfig.Config then
            Element = ConfigManager.ElementsByConfig[ElementOrConfig.Config]
            Config = ElementOrConfig.Config
            if not Element then
                Element = ConfigManager.Window.Tab[ElementOrConfig.__type](ConfigManager.Window.Tab, ElementOrConfig)
                ConfigManager.ElementsByConfig[Config] = Element
            end
        else
            Element = ElementOrConfig
            Config = Element.Config
        end
        self.Elements[Name] = Element
        if Config then
            Element.Config = Config
            ConfigManager.ElementsByConfig[Config] = Element
        end
    end

    function ConfigModule:Save()
        local saveData = { Elements = {} }
        for name, element in pairs(self.Elements) do
            local parser = ConfigManager.Parser[element.__type]
            if parser then
                saveData.Elements[name] = parser.Save(element)
            end
        end
        writefile(self.Path .. configFilename .. ".json", HttpService:JSONEncode(saveData))
    end

    function ConfigModule:Load()
        if not isfile(self.Path .. configFilename .. ".json") then return false, "Invalid file" end
        local loadData = HttpService:JSONDecode(readfile(self.Path .. configFilename .. ".json"))
        for name, data in pairs(loadData.Elements) do
            local element = self.Elements[name]
            local parser = ConfigManager.Parser[data.__type]
            if element and parser then
                task.spawn(function()
                    parser.Load(element, data)
                end)
            end
        end
    end

    ConfigManager.Configs[configFilename] = ConfigModule
    return ConfigModule
end

function ConfigManager:AllConfigs()
    if listfiles then
        local files = {}
        for _, file in ipairs(listfiles(self.Path)) do
            local name = file:match("([^\\/]+)%.json$")
            if name then table.insert(files, name) end
        end
        return files
    end
    return false
end

return ConfigManager
